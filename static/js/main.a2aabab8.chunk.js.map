{"version":3,"sources":["audio.ts","App.tsx","geometry.ts","serviceWorker.ts","index.tsx"],"names":["a","ctx","window","AudioContext","loadSample","buffer","source","AudioBufferSourceNode","loop","panner","PannerNode","panningModel","connect","destination","suspend","start","url","fetch","res","arrayBuffer","buf","decodeAudioData","Row","styled","div","SvgContainer","App","useState","pos","x","WIDTH","y","HEIGHT","rotation","me","setMe","speaker","audio","setAudio","useEffect","setupAudio","then","rotatedSpeaker","cx","cy","angle","radians","Math","PI","cos","sin","rotate","p","setPosition","className","onKeyDown","e","console","log","key","tabIndex","onClick","resume","viewBox","style","width","height","stroke","strokeWidth","fillOpacity","transform","points","fill","r","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2aabab8.chunk.js","sourcesContent":["export interface Audio {\n  ctx: AudioContext\n  source: AudioBufferSourceNode\n  panner: PannerNode\n}\n\nexport async function setupAudio(): Promise<Audio> {\n  const ctx = new window.AudioContext()\n  const buffer = await loadSample(ctx, '/sample.mp3')\n  const source = new window.AudioBufferSourceNode(ctx, {\n    buffer: buffer,\n    loop: true\n  })\n  const panner = new window.PannerNode(ctx, { panningModel: 'HRTF' })\n  source.connect(panner).connect(ctx.destination)\n  ctx.suspend()\n  source.start()\n\n  return { ctx, source, panner }\n}\n\nasync function loadSample(ctx: AudioContext, url: string) {\n  const res = await fetch(url)\n  const buf = await res.arrayBuffer()\n  return ctx.decodeAudioData(buf)\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { setupAudio, Audio } from './audio'\nimport { rotate } from './geometry'\n\nimport styled from 'styled-components'\n\ninterface Point {\n  x: number\n  y: number\n}\n\ninterface Status {\n  pos: Point\n  rotation: number\n}\n\nconst WIDTH = 500\nconst HEIGHT = 500\n\nconst Row = styled.div`\n  display: flex;\n`\n\nconst SvgContainer = styled.div`\n  margin-right: 8px;\n`\n\nfunction App() {\n  const [me, setMe] = useState<Status>({\n    pos: { x: WIDTH / 2, y: HEIGHT / 2 },\n    rotation: 0\n  })\n\n  const [speaker] = useState<Point>({ x: WIDTH / 2, y: 0 })\n\n  const [audio, setAudio] = useState<Audio>()\n  useEffect(() => {\n    setupAudio().then(setAudio)\n  }, [])\n  const handlePlay = () => {\n    if (!audio) {\n      return\n    }\n    audio.ctx.resume()\n  }\n  const handleStop = () => {\n    if (!audio) {\n      return\n    }\n    audio.ctx.suspend()\n  }\n\n  useEffect(() => {\n    if (!audio) {\n      return\n    }\n    const rotatedSpeaker = rotate(\n      me.pos.x,\n      me.pos.y,\n      speaker.x,\n      speaker.y,\n      me.rotation\n    )\n    const p = { x: rotatedSpeaker.x - me.pos.x, y: rotatedSpeaker.y - me.pos.y }\n    const m = 0.05\n    audio.panner.setPosition(p.x * m, -p.y * m, 0)\n  }, [audio, me, speaker])\n\n  const handleKeyPressed = (e: React.KeyboardEvent<HTMLElement>) => {\n    const d = 2\n    console.log('e.key', e.key)\n    switch (e.key) {\n      case 'ArrowUp':\n        me.pos.y -= d\n        break\n      case 'ArrowDown':\n        me.pos.y += d\n        break\n      case 'ArrowLeft':\n        me.pos.x -= d\n        break\n      case 'ArrowRight':\n        me.pos.x += d\n        break\n      case 'z':\n        me.rotation = (me.rotation - 4 + 360) % 360\n        break\n      case 'x':\n        me.rotation = (me.rotation + 4 + 360) % 360\n        break\n    }\n\n    setMe({ ...me })\n  }\n  return (\n    <div className=\"App\" onKeyDown={handleKeyPressed} tabIndex={0}>\n      <div>\n        <button onClick={handlePlay}>Play</button>\n        <button onClick={handleStop}>Stop</button>\n      </div>\n\n      <Row>\n        <SvgContainer>\n          <svg viewBox={`0, 0, ${WIDTH}, ${HEIGHT}`} style={{ width: 700 }}>\n            <rect\n              x={0}\n              y={0}\n              width={WIDTH}\n              height={HEIGHT}\n              stroke=\"#555\"\n              strokeWidth={1}\n              fillOpacity={0}\n            />\n            <g\n              transform={`translate(${me.pos.x}, ${me.pos.y}) rotate(${me.rotation})`}\n            >\n              <polygon points=\"-4,-6 0,-12 4,-6\" fill=\"black\" />\n              <circle cx={0} cy={0} r={4} fill=\"black\" />\n            </g>\n\n            <g transform={`translate(${speaker.x}, ${speaker.y})`}>\n              <rect x={-10} y={-5} width={20} height={10} />\n            </g>\n          </svg>\n        </SvgContainer>\n\n        <div>\n          <h3>Usage</h3>\n          <p>Move: Left, Right, Top, Botton</p>\n          <p>Rotate: Z, X</p>\n        </div>\n      </Row>\n    </div>\n  )\n}\n\nexport default App\n","export function rotate(\n  cx: number,\n  cy: number,\n  x: number,\n  y: number,\n  angle: number\n) {\n  const radians = (Math.PI / 180) * angle\n  const cos = Math.cos(radians)\n  const sin = Math.sin(radians)\n  const nx = cos * (x - cx) + sin * (y - cy) + cx\n  const ny = cos * (y - cy) - sin * (x - cx) + cy\n  return { x: nx, y: ny }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}